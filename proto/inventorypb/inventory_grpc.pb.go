// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: proto/inventory.proto

package inventorypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_GetProductInventory_FullMethodName = "/inventorypb.InventoryService/GetProductInventory"
	InventoryService_LockInventory_FullMethodName       = "/inventorypb.InventoryService/LockInventory"
	InventoryService_ReleaseInventory_FullMethodName    = "/inventorypb.InventoryService/ReleaseInventory"
	InventoryService_ConfirmInventory_FullMethodName    = "/inventorypb.InventoryService/ConfirmInventory"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 库存服务接口定义
type InventoryServiceClient interface {
	// 获取产品库存信息
	GetProductInventory(ctx context.Context, in *GetProductInventoryRequest, opts ...grpc.CallOption) (*GetProductInventoryResponse, error)
	// 锁定库存
	LockInventory(ctx context.Context, in *LockInventoryRequest, opts ...grpc.CallOption) (*LockInventoryResponse, error)
	// 释放库存
	ReleaseInventory(ctx context.Context, in *ReleaseInventoryRequest, opts ...grpc.CallOption) (*ReleaseInventoryResponse, error)
	// 确认库存扣减
	ConfirmInventory(ctx context.Context, in *ConfirmInventoryRequest, opts ...grpc.CallOption) (*ConfirmInventoryResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) GetProductInventory(ctx context.Context, in *GetProductInventoryRequest, opts ...grpc.CallOption) (*GetProductInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_GetProductInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) LockInventory(ctx context.Context, in *LockInventoryRequest, opts ...grpc.CallOption) (*LockInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LockInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_LockInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ReleaseInventory(ctx context.Context, in *ReleaseInventoryRequest, opts ...grpc.CallOption) (*ReleaseInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_ReleaseInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConfirmInventory(ctx context.Context, in *ConfirmInventoryRequest, opts ...grpc.CallOption) (*ConfirmInventoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmInventoryResponse)
	err := c.cc.Invoke(ctx, InventoryService_ConfirmInventory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
//
// 库存服务接口定义
type InventoryServiceServer interface {
	// 获取产品库存信息
	GetProductInventory(context.Context, *GetProductInventoryRequest) (*GetProductInventoryResponse, error)
	// 锁定库存
	LockInventory(context.Context, *LockInventoryRequest) (*LockInventoryResponse, error)
	// 释放库存
	ReleaseInventory(context.Context, *ReleaseInventoryRequest) (*ReleaseInventoryResponse, error)
	// 确认库存扣减
	ConfirmInventory(context.Context, *ConfirmInventoryRequest) (*ConfirmInventoryResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) GetProductInventory(context.Context, *GetProductInventoryRequest) (*GetProductInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInventory not implemented")
}
func (UnimplementedInventoryServiceServer) LockInventory(context.Context, *LockInventoryRequest) (*LockInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ReleaseInventory(context.Context, *ReleaseInventoryRequest) (*ReleaseInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseInventory not implemented")
}
func (UnimplementedInventoryServiceServer) ConfirmInventory(context.Context, *ConfirmInventoryRequest) (*ConfirmInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmInventory not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_GetProductInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetProductInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetProductInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetProductInventory(ctx, req.(*GetProductInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_LockInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).LockInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_LockInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).LockInventory(ctx, req.(*LockInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ReleaseInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ReleaseInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ReleaseInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ReleaseInventory(ctx, req.(*ReleaseInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConfirmInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConfirmInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConfirmInventory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConfirmInventory(ctx, req.(*ConfirmInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventorypb.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductInventory",
			Handler:    _InventoryService_GetProductInventory_Handler,
		},
		{
			MethodName: "LockInventory",
			Handler:    _InventoryService_LockInventory_Handler,
		},
		{
			MethodName: "ReleaseInventory",
			Handler:    _InventoryService_ReleaseInventory_Handler,
		},
		{
			MethodName: "ConfirmInventory",
			Handler:    _InventoryService_ConfirmInventory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inventory.proto",
}
