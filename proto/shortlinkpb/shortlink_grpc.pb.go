// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/shortlinkpb/shortlink.proto

package shortlinkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortlinkService_ShortenURL_FullMethodName       = "/shortlink.ShortlinkService/ShortenURL"
	ShortlinkService_Redierect_FullMethodName        = "/shortlink.ShortlinkService/Redierect"
	ShortlinkService_GetTopLinks_FullMethodName      = "/shortlink.ShortlinkService/GetTopLinks"
	ShortlinkService_BatchShortenURLs_FullMethodName = "/shortlink.ShortlinkService/BatchShortenURLs"
	ShortlinkService_DeleteUserURLs_FullMethodName   = "/shortlink.ShortlinkService/DeleteUserURLs"
)

// ShortlinkServiceClient is the client API for ShortlinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortlinkServiceClient interface {
	// 长链接 → 短链接
	ShortenURL(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error)
	// 短链接 → 长链接
	Redierect(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	// 获取前N条热点link
	GetTopLinks(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopResponse, error)
	// 批量生成短链接
	BatchShortenURLs(ctx context.Context, in *BatchShortenRequest, opts ...grpc.CallOption) (*BatchShortenResponse, error)
	// 删除用户的所有短链接
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error)
}

type shortlinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortlinkServiceClient(cc grpc.ClientConnInterface) ShortlinkServiceClient {
	return &shortlinkServiceClient{cc}
}

func (c *shortlinkServiceClient) ShortenURL(ctx context.Context, in *ShortenRequest, opts ...grpc.CallOption) (*ShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShortenResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_ShortenURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) Redierect(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_Redierect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) GetTopLinks(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_GetTopLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) BatchShortenURLs(ctx context.Context, in *BatchShortenRequest, opts ...grpc.CallOption) (*BatchShortenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchShortenResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_BatchShortenURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*DeleteUserURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_DeleteUserURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortlinkServiceServer is the server API for ShortlinkService service.
// All implementations must embed UnimplementedShortlinkServiceServer
// for forward compatibility.
type ShortlinkServiceServer interface {
	// 长链接 → 短链接
	ShortenURL(context.Context, *ShortenRequest) (*ShortenResponse, error)
	// 短链接 → 长链接
	Redierect(context.Context, *ResolveRequest) (*ResolveResponse, error)
	// 获取前N条热点link
	GetTopLinks(context.Context, *TopRequest) (*TopResponse, error)
	// 批量生成短链接
	BatchShortenURLs(context.Context, *BatchShortenRequest) (*BatchShortenResponse, error)
	// 删除用户的所有短链接
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error)
	mustEmbedUnimplementedShortlinkServiceServer()
}

// UnimplementedShortlinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortlinkServiceServer struct{}

func (UnimplementedShortlinkServiceServer) ShortenURL(context.Context, *ShortenRequest) (*ShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedShortlinkServiceServer) Redierect(context.Context, *ResolveRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redierect not implemented")
}
func (UnimplementedShortlinkServiceServer) GetTopLinks(context.Context, *TopRequest) (*TopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopLinks not implemented")
}
func (UnimplementedShortlinkServiceServer) BatchShortenURLs(context.Context, *BatchShortenRequest) (*BatchShortenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchShortenURLs not implemented")
}
func (UnimplementedShortlinkServiceServer) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*DeleteUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedShortlinkServiceServer) mustEmbedUnimplementedShortlinkServiceServer() {}
func (UnimplementedShortlinkServiceServer) testEmbeddedByValue()                          {}

// UnsafeShortlinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortlinkServiceServer will
// result in compilation errors.
type UnsafeShortlinkServiceServer interface {
	mustEmbedUnimplementedShortlinkServiceServer()
}

func RegisterShortlinkServiceServer(s grpc.ServiceRegistrar, srv ShortlinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortlinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortlinkService_ServiceDesc, srv)
}

func _ShortlinkService_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_ShortenURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).ShortenURL(ctx, req.(*ShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_Redierect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).Redierect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_Redierect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).Redierect(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_GetTopLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).GetTopLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_GetTopLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).GetTopLinks(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_BatchShortenURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchShortenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).BatchShortenURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_BatchShortenURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).BatchShortenURLs(ctx, req.(*BatchShortenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_DeleteUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortlinkService_ServiceDesc is the grpc.ServiceDesc for ShortlinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortlinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortlink.ShortlinkService",
	HandlerType: (*ShortlinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenURL",
			Handler:    _ShortlinkService_ShortenURL_Handler,
		},
		{
			MethodName: "Redierect",
			Handler:    _ShortlinkService_Redierect_Handler,
		},
		{
			MethodName: "GetTopLinks",
			Handler:    _ShortlinkService_GetTopLinks_Handler,
		},
		{
			MethodName: "BatchShortenURLs",
			Handler:    _ShortlinkService_BatchShortenURLs_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _ShortlinkService_DeleteUserURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortlinkpb/shortlink.proto",
}
